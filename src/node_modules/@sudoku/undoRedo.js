import { gameHistory, ACTION_TYPES } from './stores/history';
import { userGrid } from './stores/grid';
import { candidates } from './stores/candidates';
import { hints } from './stores/hints';

/**
 * 撤销操作
 */
export function undoAction() {
    const actionToUndo = gameHistory.undo();
    
    if (!actionToUndo) {
        return false;
    }
    
    const { type, position, oldValue, oldCandidates } = actionToUndo;
    
    switch (type) {
        case ACTION_TYPES.SET_VALUE:
        case ACTION_TYPES.CLEAR_VALUE:
            // 恢复网格值，跳过历史记录
            userGrid.set(position, oldValue, true);
            break;
            
        case ACTION_TYPES.APPLY_HINT:
            // 撤销提示操作：恢复值并归还提示次数
            userGrid.set(position, oldValue, true);
            hints._undoHint();
            break;
            
        case ACTION_TYPES.ADD_CANDIDATE:
        case ACTION_TYPES.CLEAR_CANDIDATES:
            // 恢复候选数字状态
            candidates._undoSet(position, oldCandidates);
            break;
    }
    
    return true;
}

/**
 * 重做操作
 */
export function redoAction() {
    const actionToRedo = gameHistory.redo();
    
    if (!actionToRedo) {
        return false;
    }
    
    const { type, position, newValue, newCandidates } = actionToRedo;
    
    switch (type) {
        case ACTION_TYPES.SET_VALUE:
        case ACTION_TYPES.CLEAR_VALUE:
            // 重新应用网格值，跳过历史记录
            userGrid.set(position, newValue, true);
            break;
            
        case ACTION_TYPES.APPLY_HINT:
            // 重新应用提示：设置值并消耗提示次数
            userGrid.set(position, newValue, true);
            hints.useHint();
            break;
            
        case ACTION_TYPES.ADD_CANDIDATE:
        case ACTION_TYPES.CLEAR_CANDIDATES:
            // 重新应用候选数字状态
            candidates._undoSet(position, newCandidates);
            break;
    }
    
    return true;
}

/**
 * 清空历史记录（新游戏时调用）
 */
export function clearHistory() {
    gameHistory.clear();
}

/**
 * 获取撤销重做状态（用于UI）
 */
export function getUndoRedoState() {
    return {
        canUndo: gameHistory.getCurrentIndex() >= 0,
        canRedo: gameHistory.getCurrentIndex() < gameHistory.getHistoryLength() - 1,
        historyLength: gameHistory.getHistoryLength(),
        currentIndex: gameHistory.getCurrentIndex()
    };
}
