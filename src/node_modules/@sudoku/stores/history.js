import { writable, derived, get } from 'svelte/store';

// 操作类型常量
export const ACTION_TYPES = {
    SET_VALUE: 'SET_VALUE',
    CLEAR_VALUE: 'CLEAR_VALUE', 
    ADD_CANDIDATE: 'ADD_CANDIDATE',
    CLEAR_CANDIDATES: 'CLEAR_CANDIDATES',
    APPLY_HINT: 'APPLY_HINT'
};

// 历史记录管理器
function createHistory() {
    const history = writable([]);
    const currentIndex = writable(-1);
    
    // 最大历史记录数量，防止内存泄漏
    const MAX_HISTORY = 100;

    const historyStore = {
        subscribe: history.subscribe,
        
        // 添加新的历史记录
        addAction(action) {
            const currentHistoryIndex = get(currentIndex);
            const currentHistory = get(history);
            
            // 如果当前不在历史末尾，截断后续历史
            const newHistory = currentHistory.slice(0, currentHistoryIndex + 1);
            
            // 添加新操作
            const newAction = {
                ...action,
                timestamp: Date.now(),
                id: Math.random().toString(36).substr(2, 9)
            };
            
            newHistory.push(newAction);
            
            // 限制历史记录长度
            if (newHistory.length > MAX_HISTORY) {
                newHistory.shift(); // 移除最旧的记录
            } else {
                currentIndex.update(index => index + 1);
            }
            
            history.set(newHistory);
        },
        
        // 撤销操作
        undo() {
            const currentHistoryIndex = get(currentIndex);
            if (currentHistoryIndex >= 0) {
                const currentHistory = get(history);
                const actionToUndo = currentHistory[currentHistoryIndex];
                currentIndex.update(index => index - 1);
                return actionToUndo;
            }
            return null;
        },
        
        // 重做操作
        redo() {
            const currentHistoryIndex = get(currentIndex);
            const currentHistory = get(history);
            
            if (currentHistoryIndex < currentHistory.length - 1) {
                const newIndex = currentHistoryIndex + 1;
                currentIndex.set(newIndex);
                return currentHistory[newIndex];
            }
            return null;
        },
        
        // 清空历史记录
        clear() {
            history.set([]);
            currentIndex.set(-1);
        },
        
        // 获取当前索引（用于UI状态）
        getCurrentIndex: () => get(currentIndex),
        
        // 获取历史长度（用于UI状态）
        getHistoryLength: () => get(history).length,
        
        // 暴露内部stores供派生状态使用
        _history: history,
        _currentIndex: currentIndex
    };

    return historyStore;
}

export const gameHistory = createHistory();

// 派生状态：是否可以撤销
export const canUndo = derived(
    gameHistory._currentIndex,
    ($currentIndex) => $currentIndex >= 0,
    false
);

// 派生状态：是否可以重做
export const canRedo = derived(
    [gameHistory._history, gameHistory._currentIndex],
    ([$history, $currentIndex]) => $currentIndex < $history.length - 1,
    false
);

// 辅助函数：创建操作记录
export function createAction(type, position, oldValue, newValue, oldCandidates = null, newCandidates = null) {
    return {
        type,
        position: { ...position },
        oldValue,
        newValue,
        oldCandidates: oldCandidates ? [...oldCandidates] : null,
        newCandidates: newCandidates ? [...newCandidates] : null
    };
}
